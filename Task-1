# TASK ONE: EXPLORATORY DATA ANALYSIS (EDA)
# performing EDA using libraries like pandas, numpy, and matplotlib or seaborn.Explore the data's characteristics, distributions, correlations, and outliers. Visualize your findings with histograms, scatter plots, and heatmaps to gain insights into the data.


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = 'D:\Documents\Downloads\spotify_tracks.csv'  
data = pd.read_csv(file_path)

# Display basic information about the dataset
print("Dataset Info:\n")
data.info()
print("\nSummary Statistics:\n")
print(data.describe())

# Check for missing values
print("\nMissing Values:\n")
print(data.isnull().sum())

# Display the first few rows
print("\nFirst few rows:\n")
print(data.head())

# Visualizing Distributions
print("\nVisualizing distributions...")
numerical_columns = data.select_dtypes(include=['float64', 'int64']).columns

plt.figure(figsize=(15, 10))
for i, col in enumerate(numerical_columns):
    plt.subplot(len(numerical_columns) // 3 + 1, 3, i + 1)
    sns.histplot(data[col].dropna(), kde=True, bins=30, color='blue')
    plt.title(f"Distribution of {col}")
plt.tight_layout()
plt.show()

# Correlation Heatmap
print("\nCorrelation Heatmap...")
plt.figure(figsize=(12, 8))
corr_matrix = data[numerical_columns].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Matrix")
plt.show()

# Scatter Plots for Key Pairs
print("\nScatter plots for key relationships...")
key_pairs = [('danceability', 'energy'), ('tempo', 'loudness'), ('popularity', 'valence')]

plt.figure(figsize=(15, 5))
for i, (x, y) in enumerate(key_pairs):
    plt.subplot(1, 3, i + 1)
    sns.scatterplot(data=data, x=x, y=y, alpha=0.7, color='green')
    plt.title(f"{x} vs {y}")
plt.tight_layout()
plt.show()

# Boxplots to Identify Outliers
print("\nBoxplots for outlier detection...")
plt.figure(figsize=(15, 10))
for i, col in enumerate(numerical_columns):
    plt.subplot(len(numerical_columns) // 3 + 1, 3, i + 1)
    sns.boxplot(data[col].dropna(), color='purple')
    plt.title(f"Boxplot of {col}")
plt.tight_layout()
plt.show()

print("EDA completed.")
